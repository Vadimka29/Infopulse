
public class DoublyLinkedList<E> {
	private DlNode<E> head;
	private DlNode<E> tail;
	private int size;
	
	public DoublyLinkedList(){
		head = new DlNode<E>(null, this);
		tail = new DlNode<E>(null, this);
		head.setNext(tail);
		tail.setPrev(head);
	}
	
	public int size(){
		return size;
	}
	//необходим для операций удаления(для проверки есть ли вообще что удалять)
	public boolean isEmpty(){
		return size == 0;
	}
	public DlNode<E> addFirst(E e){
		DlNode<E> newOne = new DlNode<E>(e, this);
		DlNode<E> oldFirst = head.getNext();
		head.setNext(newOne);
		newOne.setPrev(head);
		newOne.setNext(oldFirst);
		oldFirst.setPrev(newOne);
		size ++;
		return newOne;
	}
	
	public DlNode<E> addLast(E e){
		DlNode<E> newOne = new DlNode<E>(e, this);
		DlNode<E> oldLast = tail.getPrev();
		oldLast.setNext(newOne);
		newOne.setPrev(oldLast);
		newOne.setNext(tail);
		tail.setPrev(newOne);
		size ++;
		return oldLast;
	}
	@Override
	public String toString(){
		DlNode<E> c = head.getNext();
		String toReturn = "";
		while(c != tail){
			 toReturn += c.getElement() + ",";
			 c = c.getNext();
		}
		return toReturn;
	}
	public DlNode<E> first(){
		checkIfEmpty();
		
	}
	//метод для страховки
	private void check(DlNode<E> nd){
		if(nd.getOwner() != this ||
				nd == head || nd == tail)
			throw new RuntimeException("Wrong List");
	}
	private void checkIfEmpty(){
		if(isEmpty())
			throw new RuntimeException("Empty List");
	}
}
